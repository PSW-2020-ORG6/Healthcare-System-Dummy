// <auto-generated />
using System;
using IntegrationAdapters;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IntegrationAdapters.Migrations
{
    [DbContext(typeof(IAHealthCareSystemDbContext))]
    partial class IAHealthCareSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("IntegrationAdapters.Models.ActionAndBenefitMessage", b =>
                {
                    b.Property<Guid>("ActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PharmacyName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ActionID");

                    b.ToTable("ActionAndBenefitMessage");
                });

            modelBuilder.Entity("IntegrationAdapters.Models.Api", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("PharmacyName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Subscribed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Key");

                    b.ToTable("Apis");
                });

            modelBuilder.Entity("IntegrationAdapters.Models.Medicine", b =>
                {
                    b.Property<string>("MedicineID")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("MedicineSpecificationID")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("MedicineID");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("IntegrationAdapters.Models.MedicineDosage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("MedicineName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MedicineReportId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("MedicineReportId");

                    b.ToTable("MedicineDosage");
                });

            modelBuilder.Entity("IntegrationAdapters.Models.MedicineReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("IntegrationAdapters.Models.MedicineSpecification", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Producer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Regime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Shape")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("MedicineSpecification");
                });

            modelBuilder.Entity("IntegrationAdapters.Models.Tender", b =>
                {
                    b.Property<string>("TenderName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MedicineName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("TenderName");

                    b.ToTable("Tender");
                });

            modelBuilder.Entity("IntegrationAdapters.Models.MedicineDosage", b =>
                {
                    b.HasOne("IntegrationAdapters.Models.MedicineReport", null)
                        .WithMany("Dosage")
                        .HasForeignKey("MedicineReportId");
                });
#pragma warning restore 612, 618
        }
    }
}
