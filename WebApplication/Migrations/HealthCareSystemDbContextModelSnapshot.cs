// <auto-generated />
using System;
using System.Collections.Generic;
using HealthClinicBackend.Backend.Repository.DatabaseSql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace WebApplication.Migrations
{
    [DbContext(typeof(HealthCareSystemDbContext))]
    partial class HealthCareSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Patient", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("AddressSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ChosenPhysician")
                        .HasColumnType("text");

                    b.Property<string>("Citizenship")
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("EmploymentStatus")
                        .HasColumnType("text");

                    b.Property<string>("FamilyDiseases")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("Guest")
                        .HasColumnType("boolean");

                    b.Property<string>("HealthInsuranceNumber")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMalicious")
                        .HasColumnType("boolean");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("text");

                    b.Property<string>("MunicipalityOfBirth")
                        .HasColumnType("text");

                    b.Property<string>("MunicipalityOfResidence")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<string>("ParentName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PersonalDiseases")
                        .HasColumnType("text");

                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfResidence")
                        .HasColumnType("text");

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.Property<string>("StateOfBirth")
                        .HasColumnType("text");

                    b.Property<string>("StateOfResidence")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("AddressSerialNumber");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Physician", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("AddressSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("AddressSerialNumber");

                    b.ToTable("Physician");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Secretary", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("AddressSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("AddressSerialNumber");

                    b.ToTable("Secretary");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Specialization", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Specialization");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Blog.Feedback", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PatientId")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Bed", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("BuildingSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("FloorSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PatientSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("RoomId")
                        .HasColumnType("text");

                    b.Property<string>("RoomSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("RoomSerialNumber2")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("BuildingSerialNumber");

                    b.HasIndex("FloorSerialNumber");

                    b.HasIndex("PatientSerialNumber");

                    b.HasIndex("RoomSerialNumber");

                    b.HasIndex("RoomSerialNumber2");

                    b.ToTable("Bed");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Building", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int>("Column")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Row")
                        .HasColumnType("integer");

                    b.Property<string>("Style")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Building");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Equipment", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("BuildingSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("FloorSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ProcedureTypeSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("RoomId")
                        .HasColumnType("text");

                    b.Property<string>("RoomSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("RoomSerialNumber2")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("BuildingSerialNumber");

                    b.HasIndex("FloorSerialNumber");

                    b.HasIndex("ProcedureTypeSerialNumber");

                    b.HasIndex("RoomSerialNumber");

                    b.HasIndex("RoomSerialNumber2");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Floor", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("BuildingSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("BuildingSerialNumber");

                    b.ToTable("Floor");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Medicine", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("CopyrightName")
                        .HasColumnType("text");

                    b.Property<string>("GenericName")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("MedicineManufacturerSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("MedicineTypeSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("MedicineManufacturerSerialNumber");

                    b.HasIndex("MedicineTypeSerialNumber");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.MedicineManufacturer", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("MedicineManufacturer");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.MedicineType", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("MedicineType");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Rejection", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("MedicineSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("MedicineSerialNumber")
                        .IsUnique();

                    b.ToTable("Rejection");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Room", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("BuildingSerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("Column")
                        .HasColumnType("integer");

                    b.Property<int>("ColumnSpan")
                        .HasColumnType("integer");

                    b.Property<string>("FloorSerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RoomTypeSerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("Row")
                        .HasColumnType("integer");

                    b.Property<int>("RowSpan")
                        .HasColumnType("integer");

                    b.Property<string>("Style")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("FloorSerialNumber");

                    b.HasIndex("RoomTypeSerialNumber");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.RoomType", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("RoomType");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.DiagnosticReferral", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DiagnosticTypeSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("DiagnosticTypeSerialNumber");

                    b.ToTable("DiagnosticReferral");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.DiagnosticType", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("DiagnosticType");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.FollowUp", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("PhysicianSerialNumber");

                    b.ToTable("FollowUp");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.MedicineDosage", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("MedicineSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PrescriptionSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("MedicineSerialNumber");

                    b.HasIndex("PrescriptionSerialNumber");

                    b.ToTable("MedicineDosage");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.Prescription", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.Report", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Findings")
                        .HasColumnType("text");

                    b.Property<string>("PatientConditions")
                        .HasColumnType("text");

                    b.Property<string>("PatientId")
                        .HasColumnType("text");

                    b.Property<string>("PatientName")
                        .HasColumnType("text");

                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhysitianName")
                        .HasColumnType("text");

                    b.Property<string>("ProcedureTypeSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysicianSerialNumber");

                    b.HasIndex("ProcedureTypeSerialNumber");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.SpecialistReferral", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProcedureTypeSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("PhysicianSerialNumber");

                    b.HasIndex("ProcedureTypeSerialNumber");

                    b.ToTable("SpecialistReferral");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.PharmacySupport.ActionAndBenefitMessage", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("ActionID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PharmacyName")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasAlternateKey("ActionID");

                    b.ToTable("ActionAndBenefitMessage");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Schedule.Appointment", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DateOfCanceling")
                        .HasColumnType("text");

                    b.Property<bool>("IsSurveyDone")
                        .HasColumnType("boolean");

                    b.Property<string>("PatientSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProcedureTypeSerialnumber")
                        .HasColumnType("text");

                    b.Property<string>("RoomSerialNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Urgency")
                        .HasColumnType("boolean");

                    b.HasKey("SerialNumber");

                    b.HasIndex("PatientSerialNumber");

                    b.HasIndex("PhysicianSerialNumber");

                    b.HasIndex("ProcedureTypeSerialnumber");

                    b.HasIndex("RoomSerialNumber");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Schedule.ProcedureType", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("EstimatedTimeInMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SpecializationSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("SpecializationSerialNumber");

                    b.ToTable("ProcedureType");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Survey.Question", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionText")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Survey.Survey", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("DoctorName")
                        .HasColumnType("text");

                    b.Property<string>("PatientId")
                        .HasColumnType("text");

                    b.Property<List<string>>("Questions")
                        .HasColumnType("text[]");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("SerialNumber");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Util.Address", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("CitySerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("CitySerialNumber");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Util.City", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("CountrySerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("CountrySerialNumber");

                    b.ToTable("City");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Util.Country", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.PhysicianSpecialization", b =>
                {
                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("SpecializationSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.HasKey("PhysicianSerialNumber", "SpecializationSerialNumber");

                    b.HasIndex("SpecializationSerialNumber");

                    b.ToTable("PhysicianSpecialization");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.PrescriptionMedicineDosage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("MedicineDosageSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("PrescriptionSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MedicineDosageSerialNumber");

                    b.HasIndex("PrescriptionSerialNumber");

                    b.ToTable("PrescriptionMedicineDosage");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportDiagnosticReferral", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DiagnosticReferralSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ReportSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticReferralSerialNumber")
                        .IsUnique();

                    b.HasIndex("ReportSerialNumber");

                    b.ToTable("ReportDiagnosticReferral");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportFollowUp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("FollowUpSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ReportSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FollowUpSerialNumber")
                        .IsUnique();

                    b.HasIndex("ReportSerialNumber");

                    b.ToTable("ReportFollowUp");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportPrescription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("PrescriptionSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ReportSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PrescriptionSerialNumber")
                        .IsUnique();

                    b.HasIndex("ReportSerialNumber");

                    b.ToTable("ReportPrescription");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportSpecialistReferral", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ReportSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("SpecialistReferralSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportSerialNumber");

                    b.HasIndex("SpecialistReferralSerialNumber")
                        .IsUnique();

                    b.ToTable("ReportSpecialistReferral");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Patient", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Util.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Physician", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Util.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressSerialNumber");

                    b.OwnsMany("HealthClinicBackend.Backend.Model.Util.TimeInterval", "VacationTime", b1 =>
                        {
                            b1.Property<string>("PhysicianSerialNumber")
                                .HasColumnType("text");

                            b1.Property<string>("Id")
                                .HasColumnType("text");

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("PhysicianSerialNumber", "Id");

                            b1.ToTable("Physician_VacationTime");

                            b1.WithOwner()
                                .HasForeignKey("PhysicianSerialNumber");
                        });

                    b.OwnsOne("HealthClinicBackend.Backend.Model.Util.TimeInterval", "WorkSchedule", b1 =>
                        {
                            b1.Property<string>("PhysicianSerialNumber")
                                .HasColumnType("text");

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<string>("Id")
                                .HasColumnType("text");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("PhysicianSerialNumber");

                            b1.ToTable("Physician");

                            b1.WithOwner()
                                .HasForeignKey("PhysicianSerialNumber");
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Secretary", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Util.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Bed", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Accounts.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Room", null)
                        .WithMany("Beds")
                        .HasForeignKey("RoomSerialNumber2");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Equipment", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Schedule.ProcedureType", null)
                        .WithMany("RequiredEquipment")
                        .HasForeignKey("ProcedureTypeSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Room", null)
                        .WithMany("Equipment")
                        .HasForeignKey("RoomSerialNumber2");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Floor", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingSerialNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Medicine", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.MedicineManufacturer", "MedicineManufacturer")
                        .WithMany()
                        .HasForeignKey("MedicineManufacturerSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.MedicineType", "MedicineType")
                        .WithMany()
                        .HasForeignKey("MedicineTypeSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Rejection", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Medicine", "Medicine")
                        .WithOne()
                        .HasForeignKey("HealthClinicBackend.Backend.Model.Hospital.Rejection", "MedicineSerialNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Room", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorSerialNumber")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.DiagnosticReferral", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.DiagnosticType", "DiagnosticType")
                        .WithMany()
                        .HasForeignKey("DiagnosticTypeSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.FollowUp", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Accounts.Physician", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.MedicineDosage", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Prescription", null)
                        .WithMany("MedicineDosage")
                        .HasForeignKey("PrescriptionSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.Report", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Accounts.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("HealthClinicBackend.Backend.Model.Accounts.Physician", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Schedule.ProcedureType", "ProcedureType")
                        .WithMany()
                        .HasForeignKey("ProcedureTypeSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.SpecialistReferral", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Accounts.Physician", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Schedule.ProcedureType", "ProcedureType")
                        .WithMany()
                        .HasForeignKey("ProcedureTypeSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Schedule.Appointment", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Accounts.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Accounts.Physician", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Schedule.ProcedureType", "ProcedureType")
                        .WithMany()
                        .HasForeignKey("ProcedureTypeSerialnumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomSerialNumber");

                    b.OwnsOne("HealthClinicBackend.Backend.Model.Util.TimeInterval", "TimeInterval", b1 =>
                        {
                            b1.Property<string>("AppointmentSerialNumber")
                                .HasColumnType("text");

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<string>("Id")
                                .HasColumnType("text");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentSerialNumber");

                            b1.ToTable("Appointment");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentSerialNumber");
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Schedule.ProcedureType", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Accounts.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Util.Address", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Util.City", "City")
                        .WithMany()
                        .HasForeignKey("CitySerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Util.City", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Util.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountrySerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.PhysicianSpecialization", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Accounts.Physician", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianSerialNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClinicBackend.Backend.Model.Accounts.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationSerialNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.PrescriptionMedicineDosage", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.MedicineDosage", "MedicineDosage")
                        .WithMany()
                        .HasForeignKey("MedicineDosageSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportDiagnosticReferral", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.DiagnosticReferral", "DiagnosticReferral")
                        .WithOne()
                        .HasForeignKey("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportDiagnosticReferral", "DiagnosticReferralSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportFollowUp", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.FollowUp", "FollowUp")
                        .WithOne()
                        .HasForeignKey("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportFollowUp", "FollowUpSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportPrescription", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Prescription", "Prescription")
                        .WithOne()
                        .HasForeignKey("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportPrescription", "PrescriptionSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportSpecialistReferral", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.SpecialistReferral", "SpecialistReferral")
                        .WithOne()
                        .HasForeignKey("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportSpecialistReferral", "SpecialistReferralSerialNumber");
                });
#pragma warning restore 612, 618
        }
    }
}
